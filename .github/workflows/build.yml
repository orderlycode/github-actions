name: Build docker image and push
on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      tags:
        description: "comma separated tags (ex: latest,1.0.0)"
        required: true
        type: string
      env:
        description: base64 encoded .env content (cat .env | base64)
        required: false
        default: ""
        type: string
      platforms:
        type: string
        required: false
        default: "linux/amd64,linux/arm64"
    secrets:
      HUB_HOST:
        required: true
      HUB_USERNAME:
        required: true
        description: registry login username
      HUB_PASSWORD:
        required: true
        description: registry login password
jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: "actions/checkout@v4"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Copy Env
        if: ${{ inputs.env != ''}}
        run: echo ${{ inputs.env }} | base64 -d > .env

      - name: Decode Base64
        run: |
          echo REGISTRY=${{ secrets.HUB_HOST }} | base64 -d >> $GITHUB_ENV
          echo USER_NAME=${{ secrets.HUB_USERNAME }} | base64 -d >> $GITHUB_ENV
          echo PASSWORD=${{ secrets.HUB_PASSWORD }} | base64 -d >> $GITHUB_ENV
          echo $REGISTRY
          echo $USER_NAME
          echo $PASSWORD

      - name: Login
        uses: "docker/login-action@v3"
        with:
          username: ${{ secrets.HUB_USERNAME }}
          password: ${{ secrets.HUB_PASSWORD }}
          registry: ${{ secrets.HUB_HOST }}

      - name: Build and Push Image
        run: |
          npx zx <<'EOF'
          const tags = process.env.TAGS.split(',')
          $.quote = it => it
          let tagsArgs = tags
            .map(tag => `-t ${process.env.REGISTRY}/${process.env.APP_NAME}:${tag}`)
            .join(' ');
          console.log(`docker buildx build --platform ${process.env.PLATFORMS} --push ${tagsArgs} .`)
          await $`docker buildx build --platform ${process.env.PLATFORMS} --push ${tagsArgs} .`
          EOF
        env:
          PLATFORMS: ${{ inputs.platforms}}
          REGISTRY: ${{ secrets.HUB_HOST }}
          APP_NAME: ${{ inputs.app_name}}
          TAGS: ${{ inputs.tags}}
